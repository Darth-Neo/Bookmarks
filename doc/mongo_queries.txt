#
# MongoDB Queries - Bookmarks
#
db.getCollection('Bookmarks').aggregate([{"$group":{_id:"$name", count : {"$sum":1}}}])
db.getCollection('Bookmarks').find({"$where" : "this.words.length > 0"})

# Did not work?
db.getCollection('Bookmarks').find({"$where" : "this.words.length > 0"}).sort({"_id":-1})

# $exists
#
db.getCollection('Weather').find({"words" : {"$exists" : "True"}})
db.getCollection('Weather').find({"to" : {"$exists" : "true"}})

# Comparisons
#
db.getCollection('Weather').find({"Temperature" : {"$gt" : 90}})
db.getCollection('Weather').find({},{'Temperature':"$exists"}).limit(50).sort({'Temperature':{"$gt":90}})

# Sorting
#
db.getCollection('Weather').find({}).sort({"_id":-1})

# Average
#
db.getCollection('Weather').aggregate([{$group : {_id : "$Message_Type", AvgTemperature : {$avg : "$Temperature"}}}])

# Maximum
#
db.getCollection('Weather').aggregate([{"$group":{_id:"$From", max_temp : {"$max" : "$Temperature"}}}])

# Maximum Temperature by Message_Type
#

db.getCollection('Weather').aggregate([{"$group":{_id:"$id", max : {"$max" : "$Barometer"}}}])

# Indexes
#
db.profiles.create_index([('From', pymongo.ASCENDING)], unique='False')

# Check
#
list(db.profiles.index_information())

# Get Wind Speed Peak and order descending
#
db.getCollection('Weather').find({"Wind Speed PeaK": {'$exists' : "True"}}).sort({"Wind Speed PeaK":-1})

# Field Counts
#
db.getCollection('Weather').aggregate([{"$group":{_id:"$Path", count : {"$sum":1}}}])

#
# Python API
#

# Group via Reducer
#
reducer = Code("""function(obj, prev){  prev.count++;} """)

# From
#
results = collection.group(key={"From":1}, condition={}, initial={"count":0}, reduce=reducer, finalize=None)
s = sorted(results, key=lambda result: result["count"], reverse=True)
for doc in s: print doc;

# To
#
results = collection.group(key={"To":1}, condition={}, initial={"count":0}, reduce=reducer, finalize=None)
s = sorted(results, key=lambda result: result["count"], reverse=True)
for doc in s: print doc;

# Array of Arrays
# https://stackoverflow.com/questions/12629692/querying-an-array-of-arrays-in-mongod
db.getCollection('Bookmarks').find({"words": {$size: 3}})
db.getCollection('Bookmarks').find({'words':{$elemMatch:{$elemMatch:{$in:['resistor']}}}})
db.getCollection('Bookmarks').find({'words':{$elemMatch:{$elemMatch:{$in:['find']}}}})

# Array of Dictionaries
db.getCollection('Bookmarks').find({'words': {$elemMatch: {"word": {$eq: "google"}}}})

# Max
db.getCollection('Bookmarks').aggregate([{ $group: { _id: "$Total_Words", maxWords: {$max: "TotalWords"}} }])
db.getCollection('Bookmarks').aggregate([{ $group: { _id: "$Total_Words", maxWords: {$max: "TotalWords"}} }].sort({"maxWords":-1}))

# Return specific fields
db.getCollection('Bookmarks').find({'words': {$elemMatch: {"word": {$eq: "google"}}}}, { item: 1, name: 1})